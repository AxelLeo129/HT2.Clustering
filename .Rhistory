?mtcars
datos<-mtcars
mtcars -> datos1
?mean
mean(datos)
?str
str(datos)
datos$mpg
clear
clean
cls
clear
clearPushBack()
knitr::opts_chunk$set(echo = TRUE)
summary(data)
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('datos/tmdb-movies.csv')
show(movies)
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('datos/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('data/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('data/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('data/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('/data/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/data/tmdb-movies.csv')
#setwd("C:/Users/Kevin Macario/Desktop/Uvg/9no Semestre/Mineria de Datos/HT1DataMining/data")
movies <- read.csv('D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/tmdb-movies.csv')
show(movies)
library(tidyr)
mov <- separate(movies, col = "genres", into = c("primary_genre", "secondary_genre", sep = "|"))
#pelicula mas votada
maxVote <- which(movies$vote_count == max(movies$vote_count))
movies[maxVote,]
hist(data2$budget,
main = "Histograma para el presupuesto de las películas",
xlab = "Presupuesto",
breaks = 105)
movies<-read.csv("data/tmdb-movies.csv")
movies<-read.csv("D:\AxelFolder\University\Minería de Datos\HT1DataMining\data\tmdb-movies.csv")
movies<-read.csv("D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/tmdb-movies.csv")
view(movies)
View(movies)
str(movies)
#4.10
directores <- mov[order(-vote_average),]
#4.10
directores <- movies[order(-vote_average),]
View(movies)
View(movies)
View(movies)
#4.10
directores <- movies[order(movies$vote_average),]
View(directores)
#4.10
directores <- movies[order(-movies$vote_average),]
View(directores)
directores <- head(popMovies, 20)
directores <- head(directores, 20)
View(directores)
#4.10
directores <- na.omit(movies$director)
directores
#4.10
directores <- is.na(movies$director)
#4.10
movies[!is.na(movies$director),]
View(movies)
#4.10
directores <- movies[!is.na(movies$director),]
View(directores)
directores <- movies[order(-movies$vote_average),]
directores <- head(directores, 20)
View(directores)
#4.10
directores <- movies[!is.na(movies$director),]
directores <- directores[order(-movies$vote_average),]
directores <- head(directores, 20)
View(directores)
View(directores)
#4.10
movies[!is.na(movies$director),]
#4.10
directores <- movies[!is.na(movies$director),]
#4.10
#directores <- movies[!is.na(movies$director),]
directores <- na.omit(movies, cols="director")
#4.10
#directores <- movies[!is.na(movies$director),]
directores <- na.omit(movies, cols="director")
directores <- directores[order(-movies$vote_average),]
#4.10
#directores <- movies[!is.na(movies$director),]
directores <- na.omit(movies, cols="director")
directores <- directores[order(-movies$vote_average),]
#4.10
#directores <- movies[!is.na(movies$director),]
directores <- na.omit(movies, cols="director")
#4.10
#directores <- movies[!is.na(movies$director),]
directores <- na.omit(movies, col("director"))
#4.10
#directores <- movies[!is.na(movies$director),]
movies <- na.omit(movies, col("director"))
#4.10
directores <- movies[!is.na(movies$director),]
#4.10
View(movies[!is.na(movies$director),])
#4.10
movies[!is.na(movies$director),]
#4.10
directores <- movies[!is.na(movies$director),][order(-movies$vote_average),]
View(directores)
#4.10
directores <- movies[movies$director != "",][order(-movies$vote_average),]
View(directores)
View(directores)
#4.10
directores <- movies[!is.na(movies$director), movies[movies$director != "",], ][order(-movies$vote_average),]
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  movies[!movies$director == "",]
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  directores[!directores$director == "",]
directores <- directores[order(-movies$vote_average)]
directores <- head(directores, 20)
View(directores)
View(directores)
View(directores)
View(directores)
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  directores[!directores$director == "",]
directores <- directores[order(-directores$vote_average)]
directores <- head(directores, 20)
directores <- directores[order(-directores$vote_average), ]
directores <- head(directores, 20)
View(directores)
View(directores)
View(movies)
View(movies)
View(movies)
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  directores[!directores$director == "",]
View(directores)
View(directores)
directores <- directores[order(-directores$vote_average), ]
View(directores)
directores <- head(directores, 20)
View(directores)
View(directores)
directores <- table(directores$director, directores$vote_average)
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  directores[!directores$director == "",]
directores <- directores[order(-directores$vote_average), ]
directores <- head(directores, 20)
View(directores)
View(directores)
table(directores$director, directores$vote_average)
summary(directores)
tabla_directores <- table(directores$director, directores$vote_average)
tabla_directores[order(-vote_average)]
tabla_directores[order(-directores$vote_average)]
tabla_directores
View(directores)
View(tabla_directores)
View(directores)
View(directores)
View(directores)
View(directores[9])
View(directores[9], directores[1])
View(directores[9:2])
#4.11
?View
View(directores[c("director")])
View(directores[c("director", "vote_average")])
tabla_directores <- directores[c("director", "vote_average")]
View(tabla_directores)
#4.11
plot(movies$budget ~ movies$revenue, main="Diagrama de dispersión y correlación de las variables Presupuesto e Ingresos", xlab="Ingresos", ylab="Presupuesto")
#4.11
plot(movies$budget ~ movies$revenue, main="Diagrama de dispersión y correlación \nentre las variables Presupuesto e Ingresos", xlab="Ingresos", ylab="Presupuesto")
obline(lm(movies$budget ~ movies$revenue))
abline(lm(movies$budget ~ movies$revenue))
correlacion <- movies[c("budget", "revenue")]
install.packages("psych")
library(psych)
pairs.panels(correlacion)
#4.12
?pairs.panels
#4.12
asociacion <- movies[c("release_date", "revenue")]
pairs.panels(asociacion)
View(directores)
View(movies)
install.packages("lubridate")
#4.12
for (i in movies) {
print (i)
}
#4.12
for (i in movies) {
print (i$director)
}
#4.12
movies$month <- dummy(movies$release_date)
#4.12
library(lubridate)
movies$month <- month(movies$release_date)
movies$month <- dmy(movies$release_date)
movies$month <- as.Date(movies$release_date, "%d%B%Y")
movies$month <- dmy(movies$release_date)
movies$month <- dmy(movies$release_date)
movies$month <- dmy(movies$month)
movies$month <- as.Date(movies$release_date, "%B%d%Y")
movies$month <- as.Date(movies$release_date, "%m/%d/%Y")
movies$month <- as.Date(movies$release_date, "%B/%d/%Y")
movies$month <- as.Date(movies$release_date, "%m/%d/%YY")
movies$month <- as.Date(movies$release_date, "%m/%d/%Y")
movies$month <- dmy(movies$month)
movies$month <- as.Date(movies$release_date, "%m/%d/%Y")
movies<-read.csv("D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/tmdb-movies.csv")
movies$month <- strsplit(movies$release_date, "/")
movies$month <- movies$month[0]
movies$month <- movies$month[1]
View(movies)
View(movies)
asociacion <- movies[c(movies$month[1], "revenue")]
asociacion <- movies[c("movies$month[1]", "revenue")]
asociacion <- movies[c("month", "revenue")]
View(asociacion)
View(asociacion)
movies$month <- strsplit(movies$release_date, "/")[1]
movies$month <- vapply(strsplit(movies$release_date, "/"), `[`, 1, FUN.VALUE=character(1))
asociacion <- movies[c("month", "revenue")]
View(asociacion)
View(asociacion)
pairs.panels(asociacion)
#4.13
lanzamientos <- aggregate(movies, list(movies$month))
#4.13
lanzamientos <- aggregate(movies, list(movies$month), max)
View(lanzamientos)
View(lanzamientos)
#4.13
#lanzamientos <- aggregate(movies, list(movies$month), max)
lanzamientos <- nrow(movies[list(movies$month)])
#4.13
lanzamientos <- aggregate(movies, list(movies$month), list)
View(lanzamientos)
#4.13
lanzamientos <- aggregate(movies, list(movies$month), nrow)
View(lanzamientos)
#4.13
lanzamientos <- aggregate(movies, list(movies$month), count.fields)
#4.13
lanzamientos <- aggregate(movies, list(movies$month), count)
#4.13
lanzamientos <- aggregate(movies, list(movies$month), length)
View(lanzamientos)
nrow(movies[movies$month == "1"], )
nrow(movies[movies$month == "1", ])
install.packages("plyr")
#4.13
library(plyr)
count(bevs, "month")
count(movies, "month")
lanzamientos <- count(movies, "month")
View(lanzamientos)
lanzamientos <- lanzamientos[order(-lanzamientos$freq), ]
View(lanzamientos)
#4.14
correlacion1 <- movies[c("vote_average", "revenue")]
library(psych)
pairs.panels(correlacion1)
#4.15
duracion <- movies[order(-movies$runtime), ]
View(duracion)
#4.15
duracion <- count(movies, "runtime")
duracion <- duracion[order(-duracion$runtime), ]
View(duracion)
View(movies)
#4.15
duracion <- count(movies, "genres")
duracion <- duracion[order(-duracion$runtime), ]
duracion <- movies[order(-movies$runtime), ]
duracion <- aggregate(duracion, list(duracion$genres), sum(duracion$runtime))
duracion <- aggregate(duracion, list(duracion$genres), sum())
duracion <- aggregate(duracion$runtime, by=list(Genero=duracion$genres), sum)
View(duracion)
duracion <- duracion[order(-duracion$x), ]
duracion <- duracion[order(-duracion$x), ]
names(duracion) <- c("Genero", "Duración")
View(tabla_directores)
names(tabla_directores) <- c("Director", "Calificación")
View(tabla_directores)
pairs.panels(correlacion)
pairs.panels(asociacion)
View(lanzamientos)
lanzamientos <- lanzamientos[order(-lanzamientos$month), ]
names(lanzamientos) <- c("Mes", "Lanzamientos")
View(lanzamientos)
lanzamientos <- count(movies, "month")
lanzamientos <- lanzamientos[order(-lanzamientos$month), ]
names(lanzamientos) <- c("Mes", "Lanzamientos")
View(lanzamientos)
tabla_directores
#4.11
correlacion <- movies[c("budget", "revenue")]
library(psych)
pairs.panels(correlacion)
movies<-read.csv("D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/tmdb-movies.csv")
View(movies)
#4.10
directores <- movies[!is.na(movies$director), ]
directores <-  directores[!directores$director == "",]
directores <- directores[order(-directores$vote_average), ]
directores <- head(directores, 20)
tabla_directores <- directores[c("director", "vote_average")]
names(tabla_directores) <- c("Director", "Calificación")
View(tabla_directores)
#4.11
correlacion <- movies[c("budget", "revenue")]
library(psych)
pairs.panels(correlacion)
#4.12
library(lubridate)
movies$month <- vapply(strsplit(movies$release_date, "/"), `[`, 1, FUN.VALUE=character(1))
asociacion <- movies[c("month", "revenue")]
pairs.panels(asociacion)
#4.13
library(plyr)
lanzamientos <- count(movies, "month")
lanzamientos <- lanzamientos[order(-lanzamientos$month), ]
names(lanzamientos) <- c("Mes", "Lanzamientos")
View(lanzamientos)
lanzamientos
lanzamientos <- lanzamientos[order(-lanzamientos$month), ]
View(lanzamientos)
lanzamientos <- lanzamientos[order(-lanzamientos$Mes), ]
lanzamientos <- lanzamientos[order(-lanzamientos$Mes), ]
lanzamientos <- count(movies, "month")
lanzamientos <- lanzamientos[order(-lanzamientos$month), ]
lanzamientos <- lanzamientos[order(-lanzamientos$freq), ]
names(lanzamientos) <- c("Mes", "Lanzamientos")
lanzamientos
##Obteniendo la data
movies<-read.csv("D:/AxelFolder/University/MinerÃ­a de Datos/HT1DataMining/data/tmdb-movies.csv")
##Obteniendo la data
movies<-read.csv("D:/AxelFolder/University/Minería de Datos/HT1DataMining/data/tmdb-movies.csv")
# 4.14 Â¿CÃ³mo se correlacionan las calificaciones con el Ã©xito comercial?
correlacion1 <- movies[c("vote_average", "revenue")]
library(psych)
pairs.panels(correlacion1)
# 4.15 A quÃ© gÃ©neroprincipalpertenecen las pelÃ­culas mÃ¡s largas?
duracion <- aggregate(duracion$runtime, by=list(Genero=duracion$genres), sum)
# 4.15 A quÃ© gÃ©neroprincipalpertenecen las pelÃ­culas mÃ¡s largas?
duracion <- aggregate(movies$runtime, by=list(Genero=movies$genres), sum)
duracion <- duracion[order(-duracion$x), ]
names(duracion) <- c("Genero", "DuraciÃ³n")
duracion
names(duracion) <- c("Genero", "Duración")
duracion
# 4.15 A quÃ© gÃ©neroprincipalpertenecen las pelÃ­culas mÃ¡s largas?
duracion <- aggregate(movies$runtime, by=list(Genero=movies$genres), mean)
duracion <- duracion[order(-duracion$x), ]
names(duracion) <- c("Genero", "Duración")
duracion
duracion
library(cluster)
library(e1071)
library(mclust)
library(fpc)
library(NbClust)
#setwd("C:/Users/LENOVO/Desktop/Clases/Minería de datos/HT2/HT2.Clustering")
setwd("D:/AxelFolder/University/mineria_de_datos/HT2.Clustering")
datos <- read.csv("data/tmdb-movies.csv")
datos <- datos[datos$popularity != 0, ]
datos <- datos[datos$revenue != 0, ]
#Para saber cual es el mejor numero de cluste
Variables_analizar = c("popularity", "budget", "revenue", "runtime" , "vote_count","vote_average")
wss <- (nrow(datos[,Variables_analizar])-1)*sum(apply(datos[,Variables_analizar],2,var))
for (i in 2:10)
wss[i] <- sum(kmeans(datos[,c("popularity", "budget" , "revenue" , "runtime" , "vote_count","vote_average")], centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",  ylab="Within groups sum of squares")
View(wss)
datos <- datos[c("popularity", "budget" , "revenue" , "runtime" , "vote_count","vote_average")]
View(datos)
datos <- datos[complete.cases(datos),]
km <- kmeans(datos,4,iter.max =100)
View(datos)
View(datos)
View(km)
View(km)
datos$grupo <- km$cluster
View(datos)
View(datos)
datos <- read.csv("data/tmdb-movies.csv")
datos <- datos[datos$popularity != 0, ]
datos <- datos[datos$revenue != 0, ]
datos <- read.csv("data/tmdb-movies.csv")
datos_cluster <- datos[c("popularity", "budget" , "revenue" , "runtime" , "vote_count","vote_average")]
datos_cluster <- datos_cluster[complete.cases(datos),]
km <- kmeans(datos_cluster, 4, iter.max =100)
datos$grupo <- km$cluster
View(datos)
View(datos)
grupo1 <- datos[datos$grupo==1,]
View(grupo1)
View(grupo1)
prop.table(table(g1$genres))*100
prop.table(table(grupo1$genres))*100
nrow(grupo1)
summary(grupo1)
grupo2 <- datos[datos$grupo==2,]
prop.table(table(grupo2$genres))*100
grupo3 <- datos[datos$grupo==3,]
prop.table(table(grupo3$genres))*100
grupo4 <- datos[datos$grupo==4,]
prop.table(table(grupo4$genres))*100
plotcluster(datos_cluster,km$cluster) #grafica la ubicación de los clusters
grupo1 <- datos[datos$grupo==1,]
prop.table(table(grupo1$vote_count))*100
grupo1 <- datos[datos$grupo==1,]
prop.table(table(grupo1$vote_average))*100
#Clustering jerárquico
hc<-hclust(dist(datos_cluster))
plot(hc)
rect.hclust(hc,k=3)
groups<-cutree(hc,k=3)
datos$gruposHC<-groups
